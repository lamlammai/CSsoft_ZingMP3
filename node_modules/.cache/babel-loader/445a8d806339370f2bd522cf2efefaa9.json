{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport db from \"../../HomePage/FirebaseConfig\";\nexport const fetchNewSong = createAsyncThunk(\"song/fetch/new\", async () => {\n  const data = await db.collection(\"His\").get();\n  return data.docs.map(e => e.data());\n});\nconst songSlice = createSlice({\n  name: \"song\",\n  initialState: {\n    data: [],\n    error: null,\n    loading: \"idle\",\n    page: 1\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchNewSong.pending, (state, action) => {\n      state.loading = \"loading\";\n    }).addCase(fetchNewSong.fulfilled, (state, action) => {\n      state.loading = \"success\";\n      state.data = action.payload;\n    }).addCase(fetchNewSong.rejected, (state, action) => {\n      state.loading = \"error\";\n      state.error = action.error.message;\n    });\n  }\n});\nexport default songSlice.reducer; // export const {} = songSlice.actions;\n\nexport const selectSongData = state => state.song.data;\nexport const selectSongLoading = state => state.song.loading;\nexport const selectSongError = state => state.song.loading;","map":{"version":3,"sources":["D:/REACTJS/learning-react/src/Redux/Song/songSlice.js"],"names":["createSlice","createAsyncThunk","db","fetchNewSong","data","collection","get","docs","map","e","songSlice","name","initialState","error","loading","page","extraReducers","builder","addCase","pending","state","action","fulfilled","payload","rejected","message","reducer","selectSongData","song","selectSongLoading","selectSongError"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,EAAP,MAAe,+BAAf;AACA,OAAO,MAAMC,YAAY,GAAGF,gBAAgB,CAAC,gBAAD,EAAmB,YAAY;AACzE,QAAMG,IAAI,GAAG,MAAMF,EAAE,CAACG,UAAH,CAAc,KAAd,EAAqBC,GAArB,EAAnB;AACA,SAAOF,IAAI,CAACG,IAAL,CAAUC,GAAV,CAAeC,CAAD,IAAOA,CAAC,CAACL,IAAF,EAArB,CAAP;AACD,CAH2C,CAArC;AAIP,MAAMM,SAAS,GAAGV,WAAW,CAAC;AAC5BW,EAAAA,IAAI,EAAE,MADsB;AAE5BC,EAAAA,YAAY,EAAE;AACZR,IAAAA,IAAI,EAAE,EADM;AAEZS,IAAAA,KAAK,EAAE,IAFK;AAGZC,IAAAA,OAAO,EAAE,MAHG;AAIZC,IAAAA,IAAI,EAAE;AAJM,GAFc;AAQ5BC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CACJC,OADH,CACWf,YAAY,CAACgB,OADxB,EACiC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAChDD,MAAAA,KAAK,CAACN,OAAN,GAAgB,SAAhB;AACD,KAHH,EAIGI,OAJH,CAIWf,YAAY,CAACmB,SAJxB,EAImC,CAACF,KAAD,EAAQC,MAAR,KAAmB;AAClDD,MAAAA,KAAK,CAACN,OAAN,GAAgB,SAAhB;AACAM,MAAAA,KAAK,CAAChB,IAAN,GAAaiB,MAAM,CAACE,OAApB;AACD,KAPH,EAQGL,OARH,CAQWf,YAAY,CAACqB,QARxB,EAQkC,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AACjDD,MAAAA,KAAK,CAACN,OAAN,GAAgB,OAAhB;AACAM,MAAAA,KAAK,CAACP,KAAN,GAAcQ,MAAM,CAACR,KAAP,CAAaY,OAA3B;AACD,KAXH;AAYD;AArB2B,CAAD,CAA7B;AAwBA,eAAef,SAAS,CAACgB,OAAzB,C,CACA;;AAEA,OAAO,MAAMC,cAAc,GAAIP,KAAD,IAAWA,KAAK,CAACQ,IAAN,CAAWxB,IAA7C;AACP,OAAO,MAAMyB,iBAAiB,GAAIT,KAAD,IAAWA,KAAK,CAACQ,IAAN,CAAWd,OAAhD;AACP,OAAO,MAAMgB,eAAe,GAAIV,KAAD,IAAWA,KAAK,CAACQ,IAAN,CAAWd,OAA9C","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport db from \"../../HomePage/FirebaseConfig\";\r\nexport const fetchNewSong = createAsyncThunk(\"song/fetch/new\", async () => {\r\n  const data = await db.collection(\"His\").get();\r\n  return data.docs.map((e) => e.data());\r\n});\r\nconst songSlice = createSlice({\r\n  name: \"song\",\r\n  initialState: {\r\n    data: [],\r\n    error: null,\r\n    loading: \"idle\",\r\n    page: 1\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchNewSong.pending, (state, action) => {\r\n        state.loading = \"loading\";\r\n      })\r\n      .addCase(fetchNewSong.fulfilled, (state, action) => {\r\n        state.loading = \"success\";\r\n        state.data = action.payload;\r\n      })\r\n      .addCase(fetchNewSong.rejected, (state, action) => {\r\n        state.loading = \"error\";\r\n        state.error = action.error.message;\r\n      });\r\n  },\r\n});\r\n\r\nexport default songSlice.reducer\r\n// export const {} = songSlice.actions;\r\n\r\nexport const selectSongData = (state) => state.song.data;\r\nexport const selectSongLoading = (state) => state.song.loading;\r\nexport const selectSongError = (state) => state.song.loading;\r\n"]},"metadata":{},"sourceType":"module"}