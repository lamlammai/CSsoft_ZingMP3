{"ast":null,"code":"import * as types from '../actions/type';\nconst initialState = {\n  idTodo: 1,\n  listWork: []\n};\nexport const todoReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.ADD_WORK:\n      return { ...state,\n        ...{\n          idTodo: action.payload.id + 1,\n          listWork: [...state.listWork, {\n            id: state.idTodo,\n            title: action.payload.name,\n            done: false\n          }]\n        }\n      };\n\n    case types.DELETE_WORK:\n      const id = action.payload.id;\n      const newListWork = state.listWork.filter(item => item.id !== id);\n      return { ...state,\n        ...{\n          listWork: newListWork\n        }\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["D:/REACTJS/learning-react/src/Redux/todo/reducers/todo-reducers.js"],"names":["types","initialState","idTodo","listWork","todoReducer","state","action","type","ADD_WORK","payload","id","title","name","done","DELETE_WORK","newListWork","filter","item"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,iBAAvB;AACA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAC,CADU;AAEjBC,EAAAA,QAAQ,EAAE;AAFO,CAArB;AAIA,OAAO,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAEJ,YAAR,EAAsBK,MAAtB,KAAiC;AACxD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKP,KAAK,CAACQ,QAAX;AACA,aAAO,EACH,GAAGH,KADA;AAEH,WAAG;AACCH,UAAAA,MAAM,EAACI,MAAM,CAACG,OAAP,CAAeC,EAAf,GAAmB,CAD3B;AAECP,UAAAA,QAAQ,EAAC,CAAC,GAAGE,KAAK,CAACF,QAAV,EAAmB;AACxBO,YAAAA,EAAE,EAACL,KAAK,CAACH,MADe;AAExBS,YAAAA,KAAK,EAACL,MAAM,CAACG,OAAP,CAAeG,IAFG;AAGxBC,YAAAA,IAAI,EAAE;AAHkB,WAAnB;AAFV;AAFA,OAAP;;AAYA,SAAKb,KAAK,CAACc,WAAX;AACI,YAAMJ,EAAE,GAAGJ,MAAM,CAACG,OAAP,CAAeC,EAA1B;AACA,YAAMK,WAAW,GAAGV,KAAK,CAACF,QAAN,CAAea,MAAf,CAAsBC,IAAI,IAAGA,IAAI,CAACP,EAAL,KAAYA,EAAzC,CAApB;AACA,aAAO,EACH,GAAGL,KADA;AAEH,WAAG;AACCF,UAAAA,QAAQ,EAACY;AADV;AAFA,OAAP;;AAMA;AACJ,aAAOV,KAAP;AAxBJ;AA2BH,CA5BM","sourcesContent":["import * as types from '../actions/type';\r\nconst initialState = {\r\n    idTodo:1,\r\n    listWork: []\r\n}\r\nexport const todoReducer = (state =initialState, action) => {\r\n    switch (action.type){\r\n        case types.ADD_WORK:\r\n        return {\r\n            ...state,\r\n            ...{\r\n                idTodo:action.payload.id +1,\r\n                listWork:[...state.listWork,{\r\n                    id:state.idTodo,\r\n                    title:action.payload.name,\r\n                    done: false\r\n\r\n                }]\r\n            }\r\n        }\r\n        case types.DELETE_WORK:\r\n            const id = action.payload.id\r\n            const newListWork = state.listWork.filter(item =>item.id !== id);\r\n            return {\r\n                ...state,\r\n                ...{\r\n                    listWork:newListWork\r\n                }\r\n            }\r\n            default:\r\n        return state;\r\n    }\r\n    \r\n}"]},"metadata":{},"sourceType":"module"}