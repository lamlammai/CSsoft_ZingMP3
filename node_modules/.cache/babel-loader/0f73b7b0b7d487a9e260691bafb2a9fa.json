{"ast":null,"code":"var _jsxFileName = \"D:\\\\REACTJS\\\\learning-react\\\\src\\\\HomePage\\\\Atoms\\\\CarouselSongNew\\\\CarouselSongNew.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Pagination from \"../Pagination/Pagination\";\nimport CarouselItem from \"../CarouselItem/CarouselItem\";\nimport db from \"../../FirebaseConfig\";\nimport { fetchNewSong, selectSongData, selectSongError, selectSongLoading } from '../../../Redux/Song/songSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction CarouselSongNew() {\n  _s();\n\n  const dispatch = useDispatch();\n  const song = useSelector(selectSongData); // const [song, setSongs] = useState([]);\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postPerPage] = useState(5);\n  useEffect( // eslint-disable-next-line react-hooks/exhaustive-deps\n  () => {\n    db.collection(\"His\").get().then(snapshot => {\n      setSongs(snapshot.docs.map(e => e.data()));\n    });\n  }, []);\n  if (song.length === 0) return null;\n  const indexOfLastPost = currentPage * postPerPage;\n  const indexOfFirstPost = indexOfLastPost - postPerPage;\n  const currentPost = song[0].list.slice(indexOfFirstPost, indexOfLastPost); //set page\n\n  const paginate = Page => setCurrentPage(Page);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"CarouselTitle\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"CarouselText\",\n        children: song[0].title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n        postPerPage: postPerPage,\n        totalPost: song[0].list.length,\n        paginate: paginate,\n        currentPage: currentPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Carousel\",\n      children: currentPost.map((item, i) => /*#__PURE__*/_jsxDEV(CarouselItem, {\n        item: item\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(CarouselSongNew, \"1LG51kjVkNT5KfCx8JS5t6GPK2M=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = CarouselSongNew;\nexport default CarouselSongNew;\n\nvar _c;\n\n$RefreshReg$(_c, \"CarouselSongNew\");","map":{"version":3,"sources":["D:/REACTJS/learning-react/src/HomePage/Atoms/CarouselSongNew/CarouselSongNew.js"],"names":["React","useEffect","useState","Pagination","CarouselItem","db","fetchNewSong","selectSongData","selectSongError","selectSongLoading","useDispatch","useSelector","CarouselSongNew","dispatch","song","currentPage","setCurrentPage","postPerPage","collection","get","then","snapshot","setSongs","docs","map","e","data","length","indexOfLastPost","indexOfFirstPost","currentPost","list","slice","paginate","Page","title","item","i"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AACA,OAAOC,EAAP,MAAe,sBAAf;AACA,SAAQC,YAAR,EAAsBC,cAAtB,EAAsCC,eAAtC,EAAuDC,iBAAvD,QAA+E,+BAA/E;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;;;;AAEA,SAASC,eAAT,GAA2B;AAAA;;AACzB,QAAMC,QAAQ,GAAGH,WAAW,EAA5B;AACA,QAAMI,IAAI,GAAGH,WAAW,CAACJ,cAAD,CAAxB,CAFyB,CAGzB;;AACA,QAAM,CAACQ,WAAD,EAAaC,cAAb,IAA8Bd,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAM,CAACe,WAAD,IAAef,QAAQ,CAAC,CAAD,CAA7B;AACAD,EAAAA,SAAS,EACP;AACA,QAAM;AACJI,IAAAA,EAAE,CAACa,UAAH,CAAc,KAAd,EACGC,GADH,GAEGC,IAFH,CAESC,QAAD,IAAc;AAClBC,MAAAA,QAAQ,CAACD,QAAQ,CAACE,IAAT,CAAcC,GAAd,CAAkBC,CAAC,IAAIA,CAAC,CAACC,IAAF,EAAvB,CAAD,CAAR;AACD,KAJH;AAKD,GARM,EASP,EATO,CAAT;AAWA,MAAGZ,IAAI,CAACa,MAAL,KAAgB,CAAnB,EAAsB,OAAO,IAAP;AACtB,QAAMC,eAAe,GAAGb,WAAW,GAAEE,WAArC;AACA,QAAMY,gBAAgB,GAAGD,eAAe,GAAGX,WAA3C;AACA,QAAMa,WAAW,GAAGhB,IAAI,CAAC,CAAD,CAAJ,CAAQiB,IAAR,CAAaC,KAAb,CAAmBH,gBAAnB,EAAoCD,eAApC,CAApB,CApByB,CAsBzB;;AACA,QAAMK,QAAQ,GAAIC,IAAD,IAAQlB,cAAc,CAACkB,IAAD,CAAvC;;AACA,sBACE;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BACE;AAAG,QAAA,SAAS,EAAC,cAAb;AAAA,kBAA6BpB,IAAI,CAAC,CAAD,CAAJ,CAAQqB;AAArC;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,UAAD;AACA,QAAA,WAAW,EAAElB,WADb;AAEA,QAAA,SAAS,EAAEH,IAAI,CAAC,CAAD,CAAJ,CAAQiB,IAAR,CAAaJ,MAFxB;AAGA,QAAA,QAAQ,EAAGM,QAHX;AAIA,QAAA,WAAW,EAAElB;AAJb;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAUE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,gBACGe,WAAW,CAACN,GAAZ,CAAgB,CAACY,IAAD,EAAOC,CAAP,kBACf,QAAC,YAAD;AAAsB,QAAA,IAAI,EAAED;AAA5B,SAAmBC,CAAnB;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA,kBADF;AAkBD;;GA1CQzB,e;UACUF,W,EACJC,W;;;KAFNC,e;AA2CT,eAAeA,eAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Pagination from \"../Pagination/Pagination\";\r\nimport CarouselItem from \"../CarouselItem/CarouselItem\";\r\nimport db from \"../../FirebaseConfig\";\r\nimport {fetchNewSong, selectSongData, selectSongError, selectSongLoading} from '../../../Redux/Song/songSlice'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\n\r\nfunction CarouselSongNew() {\r\n  const dispatch = useDispatch();\r\n  const song = useSelector(selectSongData)\r\n  // const [song, setSongs] = useState([]);\r\n  const [currentPage,setCurrentPage]= useState(1);\r\n  const [postPerPage]= useState(5)\r\n  useEffect(\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    () => {\r\n      db.collection(\"His\")\r\n        .get()\r\n        .then((snapshot) => {\r\n          setSongs(snapshot.docs.map(e => e.data()))\r\n        });\r\n    },\r\n    []\r\n  );\r\n  if(song.length === 0) return null;\r\n  const indexOfLastPost = currentPage *postPerPage;\r\n  const indexOfFirstPost = indexOfLastPost - postPerPage;\r\n  const currentPost = song[0].list.slice(indexOfFirstPost,indexOfLastPost);\r\n\r\n  //set page\r\n  const paginate = (Page)=>setCurrentPage(Page)\r\n  return (\r\n    < >\r\n      <div className=\"CarouselTitle\">\r\n        <p className=\"CarouselText\">{song[0].title}</p>\r\n        <Pagination \r\n        postPerPage={postPerPage}\r\n        totalPost={song[0].list.length}\r\n        paginate ={paginate}\r\n        currentPage={currentPage}\r\n        />\r\n      </div>\r\n      <div className=\"Carousel\">\r\n        {currentPost.map((item, i) => (\r\n          <CarouselItem key={i} item={item} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\nexport default CarouselSongNew;\r\n"]},"metadata":{},"sourceType":"module"}